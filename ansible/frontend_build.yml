---
#ansible-playbook -i /home/CiCd_user/rwa-devops/ansible/inventories/environments/st_mid/hosts  /home/CiCd_user/rwa-devops/ansible/playbooks/sas_build/create_release.yml \
#--ask-become-pass --ask-vault-pass --extra-vars "env=ift_mid" --skip-tags "clear,meta"

# ansible-playbook   /home/CiCd_user/rwa-devops/ansible/playbooks/sas_build/create_release.yml --ask-become-pass --ask-vault-pass --extra-vars "run_check_mode='' env=ift_calc "  --extra-vars  @./ansible/playbooks/sas_build/secret.yml --skip-tags "clear,meta"
# sudo scp -rp CiCd_user@d5rwac-apc006lk.corp.dev.vtb:"/app/dist/rrm_deploy.run" /app/dist
# sudo scp -rp CiCd_user@d5rwac-apc006lk.corp.dev.vtb:"/app/dist/oracle_client.zip" /app/dist


#ansible-playbook   /home/CiCd_user/rwa-devops/ansible/playbooks/sas_build/create_release.yml --ask-become-pass --ask-vault-pass --extra-vars "run_check_mode='' env=dev_calc "  --extra-vars  @./ansible/playbooks/sas_build/secret.yml --skip-tags "clear,meta" --extra-vars  @./configs/ift_web/secret.yml

- name: This play create release for RRM
  hosts: dev
  #become: yes
  gather_facts: yes
  vars:   
    #ansible_python_interpreter: '{{ ansible_playbook_python }}'
    image_name: node_dev
    image_tag: 1.0
    replicas: 4


#   vars_prompt:   

    # - name: NEXUS_PWD
    #   prompt: NEXUS PWD

  pre_tasks:

    - name: install pre-requisites
      pip:
      - name:
          - openshift
          - pyyaml
          - kubernetes 

    - name: Build image and with buildargs
      docker_image:
        path: /app/lessons/deploy_project/frontend
        dockerfile: Dockerfile.dev
        name: "{{ image_name }}:{{ image_tag }}"

    - name: Restart a container and run tests
      docker_container:
        name: frontend
        image: "{{ image_name }}:{{ image_tag }}"
        state: started
        restart: yes
        command: npm run test -- --coverage
      register: test_output

    - debug: var=test_output
  
    - name: check the status of minikube.
      command: minikube status
      register: minikube_status
      changed_when: false
      ignore_errors: true

    - name: start minikube if it's not running.
      command: minikube start --vm = true
      when: "not minikube_status.stdout or 'Running' not in minikube_status.stdout"


  tasks:


    - name: get existing image hash.
      shell: |
        eval $(minikube docker-env)
        docker images -q {{ image_name }}
      register: image_hash
      changed_when: false  

    - name: create a deployment for Hello Go.
      k8s:
        state: present
        definition:
          apiVersion: apps/v1
          kind: Deployment
          metadata:
            name: hello-go
            namespace: default
          spec:
            replicas: "{{ replicas }}"
            selector:
              matchLabels:
                app: hello-go
            template:
              metadata:
                labels:
                  app: hello-go
              spec:
                containers:
                - name: hello-go
                  image: "{{ image_name }}:{{ image_tag }}"
                  imagePullPolicy: IfNotPresent
                  ports:
                  - containerPort: 3000

    - name: create a Service for Hello Go.
      k8s:
        state: present
        definition:
          apiVersion: v1
          kind: Service
          metadata:
            name: hello-go
            namespace: default
          spec:
            type: LoadBalancer
            ports:
            - port: 3000
              targetPort: 3000
            selector:
              app: hello-go


  post_tasks:

    - name: exposing Hello Go on the host via Minikube.
      command: minikube service hello-go --url
      changed_when: false
      register: minikube_service

    - debug:
        msg: "Hello Go URL: {{ minikube_service['stdout_lines'][0] }}"

    - name: verify Hello Go is responding.
      uri:
        url: "{{ minikube_service['stdout_lines'][0] }}/test"
        return_content: true
      register: hello_go_response
      failed_when: "'/test' not in hello_go_response.content"

    - debug:
        msg: "Testing URL Hello GO Requested: {{hello_go_response.content}} Status: {{hello_go_response.status}}"